// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

//(* CORE_GENERATION_INFO="p2s_p2s,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.773143,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=148,HLS_VERSION=2020_2}" *)

module p2s (
        ap_clk,
        ap_rst,
        begin_r,
        data_in,
        start_r,
        end_r,
        data_out
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   begin_r;
input  [3:0] data_in;
output   start_r;
output   end_r;
output   data_out;

reg start_r;
reg end_r;
reg data_out;

reg   [7:0] count;
reg   [7:0] ap_phi_mux_count_new_0_phi_fu_94_p8;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln23_fu_124_p2;
wire   [7:0] add_ln32_fu_151_p2;
wire   [0:0] icmp_ln29_fu_130_p2;
wire   [0:0] icmp_ln35_fu_136_p2;
wire   [0:0] p_Result_1_fu_174_p2;
wire   [0:0] p_Result_s_fu_107_p1;
wire   [0:0] select_ln17_fu_116_p0;
wire   [7:0] select_ln17_fu_116_p3;
wire   [3:0] trunc_ln819_fu_158_p1;
wire   [3:0] shl_ln819_fu_162_p2;
wire   [3:0] and_ln819_fu_168_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_40;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 count = 8'd4;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        count <= ap_phi_mux_count_new_0_phi_fu_94_p8;
    end
end

always @ (*) begin
    if ((((icmp_ln35_fu_136_p2 == 1'd0) & (icmp_ln29_fu_130_p2 == 1'd0) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln35_fu_136_p2 == 1'd1) & (icmp_ln29_fu_130_p2 == 1'd0) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_count_new_0_phi_fu_94_p8 = 8'd4;
    end else if (((icmp_ln29_fu_130_p2 == 1'd1) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_count_new_0_phi_fu_94_p8 = add_ln32_fu_151_p2;
    end else if (((icmp_ln23_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_count_new_0_phi_fu_94_p8 = 8'd1;
    end else begin
        ap_phi_mux_count_new_0_phi_fu_94_p8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln23_fu_124_p2 == 1'd1)) begin
            data_out = p_Result_s_fu_107_p1;
        end else if (((icmp_ln29_fu_130_p2 == 1'd1) & (icmp_ln23_fu_124_p2 == 1'd0))) begin
            data_out = p_Result_1_fu_174_p2;
        end else if ((1'b1 == ap_condition_40)) begin
            data_out = data_in[32'd3];
        end else begin
            data_out = 'bx;
        end
    end else begin
        data_out = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_136_p2 == 1'd1) & (icmp_ln29_fu_130_p2 == 1'd0) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        end_r = 1'd1;
    end else if ((((icmp_ln35_fu_136_p2 == 1'd0) & (icmp_ln29_fu_130_p2 == 1'd0) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln29_fu_130_p2 == 1'd1) & (icmp_ln23_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln23_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        end_r = 1'd0;
    end else begin
        end_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln23_fu_124_p2 == 1'd1)) begin
            start_r = 1'd1;
        end else if ((icmp_ln23_fu_124_p2 == 1'd0)) begin
            start_r = 1'd0;
        end else begin
            start_r = 'bx;
        end
    end else begin
        start_r = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_151_p2 = (select_ln17_fu_116_p3 + 8'd1);

assign and_ln819_fu_168_p2 = (shl_ln819_fu_162_p2 & data_in);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_40 = ((icmp_ln35_fu_136_p2 == 1'd1) & (icmp_ln29_fu_130_p2 == 1'd0) & (icmp_ln23_fu_124_p2 == 1'd0));
end

assign icmp_ln23_fu_124_p2 = ((select_ln17_fu_116_p3 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_130_p2 = (($signed(select_ln17_fu_116_p3) < $signed(8'd3)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_136_p2 = ((select_ln17_fu_116_p3 == 8'd3) ? 1'b1 : 1'b0);

assign p_Result_1_fu_174_p2 = ((and_ln819_fu_168_p2 != 4'd0) ? 1'b1 : 1'b0);

assign p_Result_s_fu_107_p1 = data_in[0:0];

assign select_ln17_fu_116_p0 = begin_r;

assign select_ln17_fu_116_p3 = ((select_ln17_fu_116_p0[0:0] == 1'b1) ? 8'd0 : count);

assign shl_ln819_fu_162_p2 = 4'd1 << trunc_ln819_fu_158_p1;

assign trunc_ln819_fu_158_p1 = select_ln17_fu_116_p3[3:0];

endmodule //p2s
