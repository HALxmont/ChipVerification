-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p2s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    begin_r : IN STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (3 downto 0);
    start_r : OUT STD_LOGIC;
    end_r : OUT STD_LOGIC;
    data_out : OUT STD_LOGIC );
end;


architecture behav of p2s is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "p2s_p2s,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.773143,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=148,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal count : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    signal ap_phi_mux_count_new_0_phi_fu_94_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln23_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln29_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_107_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_116_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_116_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln819_fu_158_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln819_fu_162_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln819_fu_168_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_40 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                count <= ap_phi_mux_count_new_0_phi_fu_94_p8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_fu_151_p2 <= std_logic_vector(unsigned(select_ln17_fu_116_p3) + unsigned(ap_const_lv8_1));
    and_ln819_fu_168_p2 <= (shl_ln819_fu_162_p2 and data_in);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_40_assign_proc : process(icmp_ln23_fu_124_p2, icmp_ln29_fu_130_p2, icmp_ln35_fu_136_p2)
    begin
                ap_condition_40 <= ((icmp_ln35_fu_136_p2 = ap_const_lv1_1) and (icmp_ln29_fu_130_p2 = ap_const_lv1_0) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0));
    end process;


    ap_phi_mux_count_new_0_phi_fu_94_p8_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_124_p2, add_ln32_fu_151_p2, icmp_ln29_fu_130_p2, icmp_ln35_fu_136_p2)
    begin
        if ((((icmp_ln35_fu_136_p2 = ap_const_lv1_0) and (icmp_ln29_fu_130_p2 = ap_const_lv1_0) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln35_fu_136_p2 = ap_const_lv1_1) and (icmp_ln29_fu_130_p2 = ap_const_lv1_0) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_count_new_0_phi_fu_94_p8 <= ap_const_lv8_4;
        elsif (((icmp_ln29_fu_130_p2 = ap_const_lv1_1) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_count_new_0_phi_fu_94_p8 <= add_ln32_fu_151_p2;
        elsif (((icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_count_new_0_phi_fu_94_p8 <= ap_const_lv8_1;
        else 
            ap_phi_mux_count_new_0_phi_fu_94_p8 <= "XXXXXXXX";
        end if; 
    end process;


    data_out_assign_proc : process(data_in, ap_CS_fsm_state1, icmp_ln23_fu_124_p2, icmp_ln29_fu_130_p2, p_Result_1_fu_174_p2, p_Result_s_fu_107_p1, ap_condition_40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln23_fu_124_p2 = ap_const_lv1_1)) then 
                data_out <= p_Result_s_fu_107_p1(0);
            elsif (((icmp_ln29_fu_130_p2 = ap_const_lv1_1) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0))) then 
                data_out <= p_Result_1_fu_174_p2(0);
            elsif ((ap_const_boolean_1 = ap_condition_40)) then 
                data_out <= data_in(3);
            else 
                data_out <= 'X';
            end if;
        else 
            data_out <= 'X';
        end if; 
    end process;


    end_r_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_124_p2, icmp_ln29_fu_130_p2, icmp_ln35_fu_136_p2)
    begin
        if (((icmp_ln35_fu_136_p2 = ap_const_lv1_1) and (icmp_ln29_fu_130_p2 = ap_const_lv1_0) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            end_r <= ap_const_logic_1;
        elsif ((((icmp_ln35_fu_136_p2 = ap_const_lv1_0) and (icmp_ln29_fu_130_p2 = ap_const_lv1_0) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln29_fu_130_p2 = ap_const_lv1_1) and (icmp_ln23_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln23_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            end_r <= ap_const_logic_0;
        else 
            end_r <= 'X';
        end if; 
    end process;

    icmp_ln23_fu_124_p2 <= "1" when (select_ln17_fu_116_p3 = ap_const_lv8_0) else "0";
    icmp_ln29_fu_130_p2 <= "1" when (signed(select_ln17_fu_116_p3) < signed(ap_const_lv8_3)) else "0";
    icmp_ln35_fu_136_p2 <= "1" when (select_ln17_fu_116_p3 = ap_const_lv8_3) else "0";
    p_Result_1_fu_174_p2 <= "0" when (and_ln819_fu_168_p2 = ap_const_lv4_0) else "1";
    p_Result_s_fu_107_p1 <= data_in(1 - 1 downto 0);
    select_ln17_fu_116_p0 <= (0=>begin_r, others=>'-');
    select_ln17_fu_116_p3 <= 
        ap_const_lv8_0 when (select_ln17_fu_116_p0(0) = '1') else 
        count;
    shl_ln819_fu_162_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & trunc_ln819_fu_158_p1(4-1 downto 0)))));

    start_r_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_124_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln23_fu_124_p2 = ap_const_lv1_1)) then 
                start_r <= ap_const_logic_1;
            elsif ((icmp_ln23_fu_124_p2 = ap_const_lv1_0)) then 
                start_r <= ap_const_logic_0;
            else 
                start_r <= 'X';
            end if;
        else 
            start_r <= 'X';
        end if; 
    end process;

    trunc_ln819_fu_158_p1 <= select_ln17_fu_116_p3(4 - 1 downto 0);
end behav;
