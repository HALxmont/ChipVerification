-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity right_rotate_with_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (16 downto 0);
    load : IN STD_LOGIC;
    rotate : IN STD_LOGIC;
    data_out : OUT STD_LOGIC_VECTOR (16 downto 0);
    data_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of right_rotate_with_load is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "right_rotate_with_load_right_rotate_with_load,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.653000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=53,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rotate_register_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal select_ln3_fu_103_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln3_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_67_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_67_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln653_fu_75_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_fu_79_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln3_fu_97_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln3_fu_97_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln3_fu_103_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_89_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln3_1_fu_111_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (or_ln3_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                rotate_register_V <= select_ln3_fu_103_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_out <= 
        or_ln_fu_89_p3 when (select_ln3_1_fu_111_p0(0) = '1') else 
        select_ln8_fu_67_p3;

    data_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_out_ap_vld <= ap_const_logic_1;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_79_p4 <= select_ln8_fu_67_p3(16 downto 1);
    or_ln3_fu_97_p0 <= (0=>rotate, others=>'-');
    or_ln3_fu_97_p1 <= (0=>load, others=>'-');
    or_ln3_fu_97_p2 <= (or_ln3_fu_97_p1 or or_ln3_fu_97_p0);
    or_ln_fu_89_p3 <= (trunc_ln653_fu_75_p1 & lshr_ln_fu_79_p4);
    select_ln3_1_fu_111_p0 <= (0=>rotate, others=>'-');
    select_ln3_fu_103_p0 <= (0=>rotate, others=>'-');
    select_ln3_fu_103_p3 <= 
        or_ln_fu_89_p3 when (select_ln3_fu_103_p0(0) = '1') else 
        data_in;
    select_ln8_fu_67_p0 <= (0=>load, others=>'-');
    select_ln8_fu_67_p3 <= 
        data_in when (select_ln8_fu_67_p0(0) = '1') else 
        rotate_register_V;
    trunc_ln653_fu_75_p1 <= select_ln8_fu_67_p3(1 - 1 downto 0);
end behav;
