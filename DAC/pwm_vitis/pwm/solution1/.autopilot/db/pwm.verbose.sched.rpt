

================================================================
== Vitis HLS Report for 'pwm'
================================================================
* Date:           Wed May  5 12:24:45 2021

* Version:        2020.2 (Build 3064766 on Wed Nov 18 09:12:47 MST 2020)
* Project:        pwm
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu49dr-ffvf1760-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  1.991 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|      0 ns|      0 ns|    1|    1|     none|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 0
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.99>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%spectopmodule_ln0 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_2"   --->   Operation 2 'spectopmodule' 'spectopmodule_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 0, void @empty_3, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 3 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %start_r"   --->   Operation 4 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %start_r, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 5 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i64 %max_cycles"   --->   Operation 6 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %max_cycles, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 7 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i64 %cycles_high"   --->   Operation 8 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %cycles_high, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 9 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i64 %cycles_hold"   --->   Operation 10 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %cycles_hold, void @empty_1, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 11 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %pwm_out"   --->   Operation 12 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %pwm_out, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 13 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i1 %end_r"   --->   Operation 14 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %end_r, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 15 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%cycles_hold_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %cycles_hold" [pwm/pwm.cpp:6]   --->   Operation 16 'read' 'cycles_hold_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%cycles_high_read = read i64 @_ssdm_op_Read.ap_none.i64, i64 %cycles_high" [pwm/pwm.cpp:6]   --->   Operation 17 'read' 'cycles_high_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%max_cycles_read = read i64 @_ssdm_op_Read.ap_none.i64, i64 %max_cycles" [pwm/pwm.cpp:6]   --->   Operation 18 'read' 'max_cycles_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%start_read = read i1 @_ssdm_op_Read.ap_none.i1, i1 %start_r" [pwm/pwm.cpp:6]   --->   Operation 19 'read' 'start_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%state_load = load i2 %state" [pwm/pwm.cpp:25]   --->   Operation 20 'load' 'state_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%count_load = load i64 %count" [pwm/pwm.cpp:45]   --->   Operation 21 'load' 'count_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.72ns)   --->   "%switch_ln25 = switch i2 %state_load, void, i2 0, void, i2 1, void, i2 2, void, i2 3, void" [pwm/pwm.cpp:25]   --->   Operation 22 'switch' 'switch_ln25' <Predicate = true> <Delay = 0.72>
ST_1 : Operation 23 [1/1] (1.13ns)   --->   "%icmp_ln75 = icmp_ult  i64 %count_load, i64 %cycles_hold_read" [pwm/pwm.cpp:75]   --->   Operation 23 'icmp' 'icmp_ln75' <Predicate = (state_load == 3)> <Delay = 1.13> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%br_ln75 = br i1 %icmp_ln75, void, void" [pwm/pwm.cpp:75]   --->   Operation 24 'br' 'br_ln75' <Predicate = (state_load == 3)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%write_ln83 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 0" [pwm/pwm.cpp:83]   --->   Operation 25 'write' 'write_ln83' <Predicate = (state_load == 3 & !icmp_ln75)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.52ns)   --->   "%br_ln0 = br void"   --->   Operation 26 'br' 'br_ln0' <Predicate = (state_load == 3 & !icmp_ln75)> <Delay = 0.52>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%write_ln77 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 1" [pwm/pwm.cpp:77]   --->   Operation 27 'write' 'write_ln77' <Predicate = (state_load == 3 & icmp_ln75)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (1.08ns)   --->   "%add_ln79 = add i64 %count_load, i64 1" [pwm/pwm.cpp:79]   --->   Operation 28 'add' 'add_ln79' <Predicate = (state_load == 3 & icmp_ln75)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.57ns)   --->   "%store_ln79 = store i64 %add_ln79, i64 %count_next" [pwm/pwm.cpp:79]   --->   Operation 29 'store' 'store_ln79' <Predicate = (state_load == 3 & icmp_ln75)> <Delay = 0.57>
ST_1 : Operation 30 [1/1] (0.52ns)   --->   "%br_ln80 = br void" [pwm/pwm.cpp:80]   --->   Operation 30 'br' 'br_ln80' <Predicate = (state_load == 3 & icmp_ln75)> <Delay = 0.52>
ST_1 : Operation 31 [1/1] (1.13ns)   --->   "%icmp_ln60 = icmp_ult  i64 %count_load, i64 %max_cycles_read" [pwm/pwm.cpp:60]   --->   Operation 31 'icmp' 'icmp_ln60' <Predicate = (state_load == 2)> <Delay = 1.13> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 0"   --->   Operation 32 'write' 'write_ln0' <Predicate = (state_load == 2)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%br_ln60 = br i1 %icmp_ln60, void, void" [pwm/pwm.cpp:60]   --->   Operation 33 'br' 'br_ln60' <Predicate = (state_load == 2)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.57ns)   --->   "%store_ln70 = store i64 1, i64 %count_next" [pwm/pwm.cpp:70]   --->   Operation 34 'store' 'store_ln70' <Predicate = (state_load == 2 & !icmp_ln60)> <Delay = 0.57>
ST_1 : Operation 35 [1/1] (0.52ns)   --->   "%br_ln0 = br void"   --->   Operation 35 'br' 'br_ln0' <Predicate = (state_load == 2 & !icmp_ln60)> <Delay = 0.52>
ST_1 : Operation 36 [1/1] (1.08ns)   --->   "%add_ln64 = add i64 %count_load, i64 1" [pwm/pwm.cpp:64]   --->   Operation 36 'add' 'add_ln64' <Predicate = (state_load == 2 & icmp_ln60)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.57ns)   --->   "%store_ln64 = store i64 %add_ln64, i64 %count_next" [pwm/pwm.cpp:64]   --->   Operation 37 'store' 'store_ln64' <Predicate = (state_load == 2 & icmp_ln60)> <Delay = 0.57>
ST_1 : Operation 38 [1/1] (0.52ns)   --->   "%br_ln65 = br void" [pwm/pwm.cpp:65]   --->   Operation 38 'br' 'br_ln65' <Predicate = (state_load == 2 & icmp_ln60)> <Delay = 0.52>
ST_1 : Operation 39 [1/1] (1.13ns)   --->   "%icmp_ln45 = icmp_ult  i64 %count_load, i64 %cycles_high_read" [pwm/pwm.cpp:45]   --->   Operation 39 'icmp' 'icmp_ln45' <Predicate = (state_load == 1)> <Delay = 1.13> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (1.08ns)   --->   "%add_ln55 = add i64 %count_load, i64 1" [pwm/pwm.cpp:55]   --->   Operation 40 'add' 'add_ln55' <Predicate = (state_load == 1)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%br_ln45 = br i1 %icmp_ln45, void, void" [pwm/pwm.cpp:45]   --->   Operation 41 'br' 'br_ln45' <Predicate = (state_load == 1)> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%write_ln53 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 0" [pwm/pwm.cpp:53]   --->   Operation 42 'write' 'write_ln53' <Predicate = (state_load == 1 & !icmp_ln45)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.57ns)   --->   "%store_ln55 = store i64 %add_ln55, i64 %count_next" [pwm/pwm.cpp:55]   --->   Operation 43 'store' 'store_ln55' <Predicate = (state_load == 1 & !icmp_ln45)> <Delay = 0.57>
ST_1 : Operation 44 [1/1] (0.52ns)   --->   "%br_ln0 = br void"   --->   Operation 44 'br' 'br_ln0' <Predicate = (state_load == 1 & !icmp_ln45)> <Delay = 0.52>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%write_ln47 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 1" [pwm/pwm.cpp:47]   --->   Operation 45 'write' 'write_ln47' <Predicate = (state_load == 1 & icmp_ln45)> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.57ns)   --->   "%store_ln49 = store i64 %add_ln55, i64 %count_next" [pwm/pwm.cpp:49]   --->   Operation 46 'store' 'store_ln49' <Predicate = (state_load == 1 & icmp_ln45)> <Delay = 0.57>
ST_1 : Operation 47 [1/1] (0.52ns)   --->   "%br_ln50 = br void" [pwm/pwm.cpp:50]   --->   Operation 47 'br' 'br_ln50' <Predicate = (state_load == 1 & icmp_ln45)> <Delay = 0.52>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 0"   --->   Operation 48 'write' 'write_ln0' <Predicate = (state_load == 0)> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%br_ln29 = br i1 %start_read, void, void" [pwm/pwm.cpp:29]   --->   Operation 49 'br' 'br_ln29' <Predicate = (state_load == 0)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.57ns)   --->   "%store_ln33 = store i64 0, i64 %count_next" [pwm/pwm.cpp:33]   --->   Operation 50 'store' 'store_ln33' <Predicate = (state_load == 0 & !start_read)> <Delay = 0.57>
ST_1 : Operation 51 [1/1] (0.52ns)   --->   "%br_ln34 = br void" [pwm/pwm.cpp:34]   --->   Operation 51 'br' 'br_ln34' <Predicate = (state_load == 0 & !start_read)> <Delay = 0.52>
ST_1 : Operation 52 [1/1] (0.57ns)   --->   "%store_ln39 = store i64 1, i64 %count_next" [pwm/pwm.cpp:39]   --->   Operation 52 'store' 'store_ln39' <Predicate = (state_load == 0 & start_read)> <Delay = 0.57>
ST_1 : Operation 53 [1/1] (0.52ns)   --->   "%br_ln0 = br void"   --->   Operation 53 'br' 'br_ln0' <Predicate = (state_load == 0 & start_read)> <Delay = 0.52>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%write_ln90 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %pwm_out, i1 0" [pwm/pwm.cpp:90]   --->   Operation 54 'write' 'write_ln90' <Predicate = false> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.57ns)   --->   "%store_ln92 = store i64 0, i64 %count_next" [pwm/pwm.cpp:92]   --->   Operation 55 'store' 'store_ln92' <Predicate = false> <Delay = 0.57>
ST_1 : Operation 56 [1/1] (0.52ns)   --->   "%br_ln93 = br void" [pwm/pwm.cpp:93]   --->   Operation 56 'br' 'br_ln93' <Predicate = false> <Delay = 0.52>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%next_state = phi i2 0, void, i2 0, void, i2 1, void, i2 1, void, i2 2, void, i2 2, void, i2 3, void, i2 3, void, i2 0, void"   --->   Operation 57 'phi' 'next_state' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%end_local = phi i1 0, void, i1 0, void, i1 0, void, i1 0, void, i1 0, void, i1 0, void, i1 0, void, i1 0, void, i1 1, void"   --->   Operation 58 'phi' 'end_local' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%store_ln97 = store i2 %next_state, i2 %state" [pwm/pwm.cpp:97]   --->   Operation 59 'store' 'store_ln97' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%count_next_load = load i64 %count_next" [pwm/pwm.cpp:98]   --->   Operation 60 'load' 'count_next_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%store_ln98 = store i64 %count_next_load, i64 %count" [pwm/pwm.cpp:98]   --->   Operation 61 'store' 'store_ln98' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%write_ln99 = write void @_ssdm_op_Write.ap_none.i1P0A, i1 %end_r, i1 %end_local" [pwm/pwm.cpp:99]   --->   Operation 62 'write' 'write_ln99' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%ret_ln101 = ret" [pwm/pwm.cpp:101]   --->   Operation 63 'ret' 'ret_ln101' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.99ns
The critical path consists of the following:
	'load' operation ('count_load', pwm/pwm.cpp:45) on static variable 'count' [31]  (0 ns)
	'add' operation ('add_ln55', pwm/pwm.cpp:55) [57]  (1.08 ns)
	'store' operation ('store_ln55', pwm/pwm.cpp:55) of variable 'add_ln55', pwm/pwm.cpp:55 on static variable 'count_next' [61]  (0.574 ns)
	blocking operation 0.332 ns on control path)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
